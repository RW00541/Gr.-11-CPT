import random
SKY_BLUE = color(0, 191, 255)
flashes = [0,1,2,3,4,5,6,7,8]
computers_choices = []
square_list = []
counter = 0
lives = 3
colors = []
users_choices = []
player_turn = False
num_of_flashes = 50
startscreen = True
levelscreen = False
endscreen = False
score = 0
def setup():
    size(640,480)
    colors.append(color(255))
    colors.append(color(255,0,0))
    colors.append(color(0,255,0))
    colors.append(color(0,0,255))
    colors.append(color(0,255,255))
    colors.append(color(255,255,0))
    colors.append(color(255,234,126))
    colors.append(color(255,0,123))
    colors.append(color(255,125,0))
    square_list.append(squares(colors[0],50,50))
    square_list.append(squares(colors[1],50, 200))
    square_list.append(squares(colors[2],50, 350))
    square_list.append(squares(colors[3], 250, 50))
    square_list.append(squares(colors[4], 250, 200))
    square_list.append(squares(colors[5], 250, 350))
    square_list.append(squares(colors[6], 450, 50))
    square_list.append(squares(colors[7], 450, 200))
    square_list.append(squares(colors[8], 450, 350))

def display_squares(counter):
    if counter%10 == 5:
        ran = random.choice(flashes)
        square_list[ran].colour = color(0)
        computers_choices.append(ran)
    elif counter %10 == 0:
        for i in range(len(square_list)):
            square_list[i].colour = colors[i]
    for i in square_list:
        i.drawsquare()

def testplayer():
    global player_turn
    player_turn = True

class squares:
    def __init__(self, colour, location_x, location_y):
        self.colour = color(colour)
        self.location_x = location_x
        self.location_y = location_y
        self.width = 100
        self.height = 100
    def drawsquare(self):
        fill(self.colour)
        #rectMode(CENTER)
        rect(self.location_x, self.location_y, self.width, self.height)

def end_screen():
    textSize(100)
    fill(255,0,0)
    text("GAME OVER!",20, 125)
    textSize(20)
    text("You completed {} levels before running out of lives".format(score), 80, 175)
    fill(255,0,0)
    rect(170, 300, 300, 120)
    fill(255)
    textSize(75)
    text("Restart", 190, 390)

def level_screen():
    fill(255)
    rect(120, 80, 100, 100)
    fill(255,0,0)
    rect(120, 260, 100, 100)
    fill(0,255,0)
    rect(380, 80, 100, 100)
    fill(0,0,255)
    rect(380, 260, 100, 100)
    fill(255,165,0)
    textSize(35)
    text("Easy", 130, 140)
    textSize(26)
    text("Normal", 385, 140)
    textSize(33)
    text("Hard", 130, 320)
    text("Very", 390, 305)
    text("Hard", 390, 350)

def start_screen():
    textSize(180)
    fill(0,0,255)
    text("G", 10, 200)
    fill(0,255,0)
    text("e", 140, 200)
    fill(255,0,0)
    text("o", 240, 200)
    fill(255,255,0)
    text("r", 350, 200)
    fill(0,255,255)
    text("g", 430, 200)
    fill(255,0,255)
    text("e", 540, 200)
    fill(255)
    rect(200, 300, 225, 90)
    fill(255,0,0)
    textSize(65)
    text("START", 210, 370)

def draw():
    global counter
    global lives
    global num_of_flashes
    global score
    global endscreen
    global computers_choices
    global users_choices
    background(SKY_BLUE)
    if startscreen:
       start_screen()
    elif levelscreen:
        lives = 3
        level_screen()
    else:
        if lives != 0:
            fill(255)
            textSize(20)
            text("lives: {}".format(lives), 500, 20)
            text("score: {}".format(score), 20, 20)
            if counter <= num_of_flashes:
                counter += 0.5
                display_squares(counter)
            else:
                counter += 0.5
                display_squares(0)
                testplayer()
                if len(users_choices) == len(computers_choices):
                    correctness = check_if_correct()
                    print(users_choices)
                    print(computers_choices)
                    if correctness:
                        score += 1
                        counter = -5
                        num_of_flashes += 10
                        users_choices = []
                        computers_choices = []
                    else:
                        lives -= 1
                        counter = -5
                        users_choices = []
                        computers_choices = []
        else:
            endscreen = True
        if endscreen:
            end_screen()

def check_if_correct():
    if users_choices == computers_choices:
        return True
    else:
        return False

def mouseClicked():
    global endscreen
    global startscreen
    global levelscreen
    if startscreen:
        if mouseY >= 300 and mouseY <= 390 and mouseX >=200 and mouseX <= 425:
            startscreen = False
            levelscreen = True
    if levelscreen:
        if mouseX >= 120 and mouseX <= 200 and mouseY >= 80 and mouseY <= 180:
            levelscreen = False
        if mouseX >= 380 and mouseX <= 480 and mouseY >= 80 and mouseY <= 180:
            levelscreen = False
        if mouseX >= 120 and mouseX <= 200 and mouseY >= 260 and mouseY <= 360:
            levelscreen = False
        if mouseX >= 380 and mouseX <= 480 and mouseY >= 260 and mouseY <= 360:
            levelscreen = False
    if player_turn == True:
        if len(users_choices) == len(computers_choices):
            player_turn == False
        elif mouseX > square_list[0].location_x and mouseX < square_list[0].location_x+100 and mouseY > square_list[0].location_y and mouseY < square_list[0].location_y+100:
            users_choices.append(0)
        elif mouseX > square_list[1].location_x and mouseX < square_list[1].location_x+100 and mouseY > square_list[1].location_y and mouseY < square_list[1].location_y+100:
            users_choices.append(1)
        elif mouseX > square_list[2].location_x and mouseX < square_list[2].location_x+100 and mouseY > square_list[2].location_y and mouseY < square_list[2].location_y+100:
            users_choices.append(2)
        elif mouseX > square_list[3].location_x and mouseX < square_list[3].location_x+100 and mouseY > square_list[3].location_y and mouseY < square_list[3].location_y+100:
            users_choices.append(3)
        elif mouseX > square_list[4].location_x and mouseX < square_list[4].location_x+100 and mouseY > square_list[4].location_y and mouseY < square_list[4].location_y+100:
            users_choices.append(4)
        elif mouseX > square_list[5].location_x and mouseX < square_list[5].location_x+100 and mouseY > square_list[5].location_y and mouseY < square_list[5].location_y+100:
            users_choices.append(5)
        elif mouseX > square_list[6].location_x and mouseX < square_list[6].location_x+100 and mouseY > square_list[6].location_y and mouseY < square_list[6].location_y+100:
            users_choices.append(6)
        elif mouseX > square_list[7].location_x and mouseX < square_list[7].location_x+100 and mouseY > square_list[7].location_y and mouseY < square_list[7].location_y+100:
            users_choices.append(7)
        elif mouseX > square_list[8].location_x and mouseX < square_list[8].location_x+100 and mouseY > square_list[8].location_y and mouseY < square_list[8].location_y+100:
            users_choices.append(8)
    if endscreen == True:
        if mouseX >= 170 and mouseX <= 470 and mouseY >= 300 and mouseY <= 420:
            levelscreen = True
            endscreen = False
